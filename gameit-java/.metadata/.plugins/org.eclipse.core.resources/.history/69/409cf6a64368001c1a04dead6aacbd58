package gameIt.registration.controller;

	import java.io.IOException;
	import java.security.Principal;
	import java.text.ParseException;
	import java.text.SimpleDateFormat;
	import java.util.ArrayList;
	import java.util.Arrays;
	import java.util.Date;
	import java.util.List;
	import java.util.Locale;
	import java.util.Optional;

	import javax.servlet.http.HttpServletRequest;

	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.dao.DataAccessException;
	import org.springframework.mail.SimpleMailMessage;
	import org.springframework.security.core.Authentication;
	import org.springframework.security.core.context.SecurityContextHolder;
	import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
	import org.springframework.security.crypto.password.PasswordEncoder;
	import org.springframework.stereotype.Controller;
	import org.springframework.ui.Model;
	import org.springframework.ui.ModelMap;
	import org.springframework.util.StringUtils;
	import org.springframework.web.bind.annotation.GetMapping;
	import org.springframework.web.bind.annotation.PostMapping;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RequestMethod;
	import org.springframework.web.bind.annotation.RequestParam;
	import org.springframework.web.bind.annotation.ResponseBody;
	import org.springframework.web.servlet.ModelAndView;

	import gameIt.registration.dao.GuardianDao;
	import gameIt.registration.dao.StudentDao;
	import gameIt.registration.dao.UserDao;
	import gameIt.registration.models.Student;
	import gameIt.registration.models.User;
import gameIt.registration.service.ConfirmationToken;
import gameIt.registration.service.ConfirmationTokenRepository;
import gameIt.registration.service.EmailService;
import gameIt.registration.service.UserEntity;
import gameIt.registration.service.UserRepository;

import org.springframework.web.bind.annotation.RequestParam;
	import org.springframework.web.multipart.MultipartFile;

	@Controller
	public class UserController {

		@Autowired
		UserDao userDao;

		@Autowired
		GuardianDao guardianDao;

		@Autowired
		StudentDao studentDao;

		@Autowired
		PasswordEncoder passwordEncoder;

		@Autowired
		private BCryptPasswordEncoder bCryptPasswordEncoder;


		@Autowired
		private UserRepository userRepository;

		@Autowired
		private ConfirmationTokenRepository confirmationTokenRepository;

		@Autowired
		private EmailService emailService;

		@RequestMapping(value = "/register", method = RequestMethod.GET)
		public ModelAndView displayRegistration(ModelAndView modelAndView, UserEntity userEntity) {

			int id = userDao.getLastUserId();
			if (id != 0)
				userEntity.setUserid(id + 1);

			modelAndView.addObject("userEntity", userEntity);
			modelAndView.setViewName("register");
			return modelAndView;
		}

		@RequestMapping(value = "/register", method = RequestMethod.POST)
		public ModelAndView registerUser(ModelAndView modelAndView, UserEntity userEntity) {

			UserEntity existingUserEmail = userRepository.findByEmailIdIgnoreCase(userEntity.getEmailId());

			UserEntity existingUserName = userRepository.findByUsername(userEntity.getUserName());

			if (existingUserEmail != null) {
				modelAndView.addObject("message", "This email already exists!");
				modelAndView.setViewName("error");
			} else if (existingUserName != null) {
				modelAndView.addObject("message", "This username already exists!");
				modelAndView.setViewName("error");
			} else {


				String encodedPassword = bCryptPasswordEncoder.encode(userEntity.getPassword());
				userEntity.setPassword(encodedPassword);

				userEntity.setUserType("guardian");

				userRepository.save(userEntity);

				ConfirmationToken confirmationToken = new ConfirmationToken(userEntity);

				confirmationTokenRepository.save(confirmationToken);

				SimpleMailMessage mailMessage = new SimpleMailMessage();
				mailMessage.setTo(userEntity.getEmailId());
				mailMessage.setSubject("Complete Registration!");
				mailMessage.setText("To confirm your account, please click here : "
						+ "http://localhost:8080/confirm-account?token=" + confirmationToken.getConfirmationToken());

				emailService.sendEmail(mailMessage);

				modelAndView.addObject("emailId", userEntity.getEmailId());

				modelAndView.setViewName("successfulRegisteration");
			}

			return modelAndView;
		}

		@RequestMapping(value = "/confirm-account", method = { RequestMethod.GET, RequestMethod.POST })
		public ModelAndView confirmUserAccount(ModelAndView modelAndView, @RequestParam("token") String confirmationToken) {
			ConfirmationToken token = confirmationTokenRepository.findByConfirmationToken(confirmationToken);

			if (token != null) {
				UserEntity user = userRepository.findByEmailIdIgnoreCase(token.getUserEntity().getEmailId());
				user.setEnabled(true);
				userRepository.save(user);
				int id = (int) user.getUserid();

				guardianDao.addGuardianId(id);

				modelAndView.setViewName("accountVerified");
			} else {
				modelAndView.addObject("message", "The link is invalid or broken!");
				modelAndView.setViewName("error");
			}

			return modelAndView;
		}


	}	
	
	

