package gameIt.registration.service;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Lazy;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.JdbcUserDetailsManager;

import gameIt.registration.dao.GuardianDao;
import gameIt.registration.dao.StudentDao;
import gameIt.registration.dao.UserDao;

	@Configuration
	@EnableWebSecurity
	public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
		
//		@Autowired
//		UserDao userDao;
//
//		@Autowired
//		GuardianDao guardianDao;
//
//		@Autowired
//		StudentDao studentDao;	
	   
	    @Autowired
	    private DataSource dataSource;
	     
	    @Bean
	    public UserDetailsService userDetailsService() {
	        return new CustomUserDetailsService();
	    }
	     
//	    @Bean
//	    public BCryptPasswordEncoder passwordEncoder() {
//	        return new BCryptPasswordEncoder();
//	    }
	     
	    @Bean
	    public DaoAuthenticationProvider authenticationProvider() {
	        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
	        authProvider.setUserDetailsService(userDetailsService());
	        authProvider.setPasswordEncoder(new BCryptPasswordEncoder());
	         
	        return authProvider;
	    }
	 
	    @Override
	    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
	        auth.authenticationProvider(authenticationProvider());
	    }
	 
	    @Override
	    protected void configure(HttpSecurity http) throws Exception {
	        http.authorizeRequests()
	        .antMatchers("/register").permitAll()
            .antMatchers("/confirm").permitAll()
	            .antMatchers("/users").authenticated()
	            .anyRequest().permitAll()
	            .and()
	            .formLogin()
//	            .loginPage("/accountVerified")
	                .usernameParameter("username")
//	                .defaultSuccessUrl("/users")
	                .defaultSuccessUrl("/students")
	                .permitAll()
	            .and()
	            .logout().logoutSuccessUrl("/login").permitAll();
	    }
	    
	    @Bean
    	public PasswordEncoder passwordEncoder() {
    		return new BCryptPasswordEncoder();
    	}

    	// Enable jdbc authentication
    	@Autowired
    	public void configAuthentication(AuthenticationManagerBuilder auth) throws Exception {
    		auth.jdbcAuthentication().dataSource(dataSource).passwordEncoder(passwordEncoder());
    	}

    	@Bean
    	public JdbcUserDetailsManager jdbcUserDetailsManager() throws Exception {
    		JdbcUserDetailsManager jdbcUserDetailsManager = new JdbcUserDetailsManager();
    		jdbcUserDetailsManager.setDataSource(dataSource);
    		return jdbcUserDetailsManager;
    	}

    	@Override
    	public void configure(WebSecurity web) throws Exception {
    		web.ignoring().antMatchers("/resources/**");
    	}     
	}
