package gameIt.registration.service;

import java.security.Principal;
import java.util.List;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import gameIt.registration.dao.GuardianDao;
import gameIt.registration.dao.StudentDao;
import gameIt.registration.dao.UserDao;
import gameIt.registration.models.Student;
import gameIt.registration.models.User;





@Controller
public class UserAccountController {

	@Autowired
	UserDao userDao;

	@Autowired
	GuardianDao guardianDao;

	@Autowired
	StudentDao studentDao;	
   
    @Autowired
    PasswordEncoder passwordEncoder;
    
    @Autowired
	private BCryptPasswordEncoder bCryptPasswordEncoder;

//    public UserEntity saveUser(final UserEntity userEntity) {
//        UserEntity userModel = populateUserData(userEntity);
//        return userRepository.save(userModel);
//    }
//
//    private UserEntity populateUserData(final UserEntity userEntity) {
//        UserEntity user = new UserEntity();
//        user.setFirstName(userEntity.getFirstName());
//        user.setLastName(userEntity.getLastName());
//        user.setEmailId(userEntity.getEmailId());
//        user.setPassword(passwordEncoder.encode(userEntity.getPassword()));
//        return user;
//    }

	
	
	
	
    @Autowired
    private UserRepository userRepository;

    @Autowired
    private ConfirmationTokenRepository confirmationTokenRepository;

    @Autowired
    private EmailService emailService;

    @RequestMapping(value="/register", method = RequestMethod.GET)
    public ModelAndView displayRegistration(ModelAndView modelAndView, UserEntity userEntity)
    {
        modelAndView.addObject("userEntity", userEntity);
        modelAndView.setViewName("register");
        return modelAndView;
    }
    
    
    
    @RequestMapping(value="/register", method = RequestMethod.POST)
    public ModelAndView registerUser(ModelAndView modelAndView, UserEntity userEntity)
    {

    	UserEntity existingUserEmail = userRepository.findByEmailIdIgnoreCase(userEntity.getEmailId());
    	
    	UserEntity existingUserName = userRepository.findByUsername(userEntity.getUserName());

        if(existingUserEmail != null)
        {
            modelAndView.addObject("message","This email already exists!");
            modelAndView.setViewName("error");
        }
        else if(existingUserName != null){
        	modelAndView.addObject("message","This username already exists!");
            modelAndView.setViewName("error");	
        }
        else
        {
        	
        	
//        	populateUserData(userEntity);
        	
    		String encodedPassword = bCryptPasswordEncoder.encode(userEntity.getPassword());
    		userEntity.setPassword(encodedPassword);
    		
    		userEntity.setUserType("guardian");
    		
    		int id = userDao.getLastUserId();
    		userEntity.setUserid(id+1);
        	userRepository.save(userEntity);

        	
            ConfirmationToken confirmationToken = new ConfirmationToken(userEntity);

            confirmationTokenRepository.save(confirmationToken);

            SimpleMailMessage mailMessage = new SimpleMailMessage();
            mailMessage.setTo(userEntity.getEmailId());
            mailMessage.setSubject("Complete Registration!");
            mailMessage.setText("To confirm your account, please click here : "
            +"http://localhost:8080/confirm-account?token="+confirmationToken.getConfirmationToken());

            emailService.sendEmail(mailMessage);

            modelAndView.addObject("emailId", userEntity.getEmailId());

            modelAndView.setViewName("successfulRegisteration");
        }

        return modelAndView;
    }
    

    @RequestMapping(value="/confirm-account", method= {RequestMethod.GET, RequestMethod.POST})
    public ModelAndView confirmUserAccount(ModelAndView modelAndView, @RequestParam("token")String confirmationToken)
    {
        ConfirmationToken token = confirmationTokenRepository.findByConfirmationToken(confirmationToken);

        if(token != null)
        {
        	UserEntity user = userRepository.findByEmailIdIgnoreCase(token.getUserEntity().getEmailId());
            user.setEnabled(true);
            userRepository.save(user);
            int id = (int) user.getUserid();
      
            guardianDao.addGuardianId(id);
            
            modelAndView.setViewName("accountVerified");
        }
        else
        {
            modelAndView.addObject("message","The link is invalid or broken!");
            modelAndView.setViewName("error");
        }

        return modelAndView;
    }
    
//    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
//
//    CustomUserDetails customUser = (CustomUserDetails)authentication.getPrincipal();
//    long userId = customUser.getUserId(); 
    
    
//    @GetMapping("/users")
//    public String listUsers(Model model, Principal principal ) {
//    	 List<UserEntity> listUsers = (List<UserEntity>) userRepository.findAll();
//    	    model.addAttribute("listUsers", listUsers);
//    	    String name = principal.getName(); //get logged in username
////            System.out.println(name);
//    	    return "users";
//    }
   
//    @GetMapping("users")
//    public String displayStudents(Model model) {
//        List<Student> students = studentDao.getStudentsForGuardian(1);
//        model.addAttribute("students", students);
//        
//        List<User> users = userDao.getAllUsers();
//        model.addAttribute("users", users);
//
//        return "students";
//    }
    
//   @GetMapping("/users")
//    public String printWelcome(ModelMap model, Principal principal ) {
//   
//        String name = principal.getName(); //get logged in username
////        model.addAttribute("username", name);
//        System.out.println(name);
//	     
//        return "users";
//   
//    }
//    
    
//    public UserEntity getUserById(long id) {
//		try {
//			final String SELECT_COURSE_BY_ID = "SELECT * FROM user WHERE userid = ?";
//			UserEntity user = jdbc.queryForObject(SELECT_COURSE_BY_ID, new StudentMapper(), id);
//			
//			return user;
//		} catch (DataAccessException ex) {
//			return null;
//		}
//	}
    
    
    @PostMapping("students")
	public String addStudent(String username, String firstname, String lastname, String password, String school,
			String diagnoses, String country, String city, Principal principal) {

		
	    String name = principal.getName(); //get logged in username
        int guardianId = userDao.getUserByUserName(name).getId();
		
		User user = new User();
		user.setUsername(username);
		user.setFirstName(firstname);
		user.setLastName(lastname);
		user.setPassword(password);

		User addedUser = userDao.addUser(user);

		Student student = new Student();

		student.setUser(addedUser);

		student.setSchool(school);
		student.setDiagnoses(diagnoses);
		student.setCountry(country);
		student.setCity(city);

		studentDao.addStudent(student, guardianId);

		return "redirect:/students";
	}
    
    
    @GetMapping("students")
	public String displayStudents(Model model, Principal principal) {
//        List<Student> students = studentDao.getAllStudents();
//        List<User> users = userDao.getAllUsers();
//        List<Guardian> guardians = guardianDao.getAllGuardians();
//
//        model.addAttribute("students", students);
//        model.addAttribute("users", users);
//        model.addAttribute("guardians", guardians);

//		List<User> users = userDao.getAllUsersForStudent();
//        model.addAttribute("users", users);

		String name = principal.getName(); // get logged in username
		int id = userDao.getUserByUserName(name).getId();
		List<Student> students = studentDao.getStudentsForGuardian(id);
		model.addAttribute("students", students);

		return "students";
	}

}
